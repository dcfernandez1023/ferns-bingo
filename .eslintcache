[{"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\index.js":"1","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\App.js":"2","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\components\\BingoContainer.js":"3","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\localStorageHelper.js":"4","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\models\\bingoModel.js":"5","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\components\\BingoCard.js":"6","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\bingoController.js":"7","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\db.js":"8","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\models\\Bingo.js":"9","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\firebaseApp.js":"10"},{"size":226,"mtime":1607476802886,"results":"11","hashOfConfig":"12"},{"size":529,"mtime":1607584031790,"results":"13","hashOfConfig":"12"},{"size":7247,"mtime":1607666233719,"results":"14","hashOfConfig":"12"},{"size":1099,"mtime":1607646852897,"results":"15","hashOfConfig":"12"},{"size":289,"mtime":1607647016737,"results":"16","hashOfConfig":"12"},{"size":2796,"mtime":1607666302274,"results":"17","hashOfConfig":"12"},{"size":955,"mtime":1607649414508,"results":"18","hashOfConfig":"12"},{"size":1001,"mtime":1607657710342,"results":"19","hashOfConfig":"12"},{"size":2636,"mtime":1607594507289,"results":"20","hashOfConfig":"12"},{"size":437,"mtime":1607592739858,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"4t3i9j",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\index.js",[],["47","48"],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\App.js",["49","50"],"import React, { useState, useEffect } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\n\nimport BingoContainer from './components/BingoContainer.js';\n\nfunction App() {\n  return (\n    <body>\n      <Container>\n        <Row>\n          <Col>\n            <BingoContainer />\n          </Col>\n        </Row>\n      </Container>\n    </body>\n  );\n}\n\nexport default App;\n","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\components\\BingoContainer.js",["51"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport BingoCard from './BingoCard.js';\r\nconst BingoController = require('../controllers/bingoController.js');\r\n\r\nconst localStorageHelper = require('../controllers/localStorageHelper.js');\r\n\r\nfunction BingoContainer() {\r\n\r\n  const[cards, setCards] = useState();\r\n  const[metaData, setMetaData] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[deleteId, setDeleteId] = useState();\r\n  const[resetShow, setResetShow] = useState();\r\n  const[resetId, setResetId] = useState();\r\n  const[isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    localStorageHelper.initializeStorage();\r\n    setCards(localStorageHelper.getCards());\r\n    setMetaData(localStorageHelper.getMetaData());\r\n  }, []);\r\n\r\n  function createCardCallback(newCard) {\r\n    //update cards\r\n    var newCards = [];\r\n    for(var i = 0; i < cards.length; i++) {\r\n      var card = JSON.parse(JSON.stringify(cards[i]));\r\n      newCards.push(card);\r\n    }\r\n    var copy = JSON.parse(JSON.stringify(newCard));\r\n    newCards.push(copy);\r\n    //update metaData\r\n    var newMetaData = JSON.parse(JSON.stringify(metaData));\r\n    newMetaData[newCard.id] = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]];\r\n    //set & save to local storage\r\n    setCards(newCards);\r\n    setMetaData(newMetaData);\r\n    localStorageHelper.updateCards(newCards);\r\n    localStorageHelper.updateMetaData(newMetaData);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function callbackOnError(error) {\r\n    //TODO: handle errors more elegantly\r\n    alert(error);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function selectBox(id, row, col) {\r\n    var newMetaData = JSON.parse(JSON.stringify(metaData));\r\n    if(newMetaData[id][row][col] === 1) {\r\n      newMetaData[id][row][col] = 0;\r\n    }\r\n    else {\r\n      newMetaData[id][row][col] = 1;\r\n    }\r\n    setMetaData(newMetaData);\r\n    localStorageHelper.updateMetaData(newMetaData);\r\n  }\r\n\r\n  function deleteCardCallback(id) {\r\n    //update cards\r\n    var newCards = [];\r\n    for(var i = 0; i < cards.length; i++) {\r\n      if(cards[i].id !== id) {\r\n        var card = JSON.parse(JSON.stringify(cards[i]));\r\n        newCards.push(card);\r\n      }\r\n    }\r\n    var newMetaData = JSON.parse(JSON.stringify(metaData));\r\n    delete newMetaData[id];\r\n    setCards(newCards);\r\n    setMetaData(newMetaData);\r\n    localStorageHelper.updateCards(newCards);\r\n    localStorageHelper.updateMetaData(newMetaData);\r\n    setDeleteShow(false);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function resetCard() {\r\n    if(resetId === undefined) {\r\n      alert(\"Internal error. Could not reset card.\");\r\n      return;\r\n    }\r\n    var newMetaData = JSON.parse(JSON.stringify(metaData));\r\n    newMetaData[resetId] = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]];\r\n    setMetaData(newMetaData);\r\n    localStorageHelper.updateMetaData(newMetaData);\r\n    setResetShow(false);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  if(cards === undefined || metaData === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <Row  style = {{marginTop: \"2%\", textAlign: \"center\"}}>\r\n          <Col>\r\n            <Spinner animation = \"border\" />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      {/*maximum card modal*/}\r\n      <Modal\r\n        show = {show}\r\n        onHide = {() => {setShow(false)}}\r\n      >\r\n        <Modal.Header closeButton> Card Limit Reached </Modal.Header>\r\n        <Modal.Body> Cannot add a new bingo card. The maximum limit is 4 cards. </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {setShow(false)}}\r\n          >\r\n            OK\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      {/*delete card modal*/}\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {() => {setDeleteShow(false)}}\r\n      >\r\n        <Modal.Header closeButton> Confirm Delete </Modal.Header>\r\n        <Modal.Body> Are you sure you want to delete this bingo card? </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {\r\n              if(deleteId !== undefined) {\r\n                setIsLoading(true);\r\n                BingoController.deleteCard(deleteId,\r\n                  deleteCardCallback,\r\n                  callbackOnError\r\n                );\r\n              }\r\n              else {\r\n                alert(\"Internal error. Could not delete card.\");\r\n              }\r\n            }}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      {/*reset card modal*/}\r\n      <Modal\r\n        show = {resetShow}\r\n        onHide = {() => {setResetShow(false)}}\r\n      >\r\n        <Modal.Header closeButton> Confirm Reset </Modal.Header>\r\n        <Modal.Body> Are you sure you want to reset this bingo card? </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {\r\n              setIsLoading(true);\r\n              resetCard();\r\n            }}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setResetShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col>\r\n          <h4>\r\n            <Button variant = \"success\" style = {{marginRight: \"1%\"}}\r\n              onClick = {() => {\r\n                if(cards.length === 4) {\r\n                  setShow(true);\r\n                  return;\r\n                }\r\n                setIsLoading(true);\r\n                BingoController.createCard(\r\n                  createCardCallback,\r\n                  callbackOnError\r\n                );\r\n              }}\r\n            >\r\n              +\r\n            </Button>\r\n            Your Cards\r\n          </h4>\r\n        </Col>\r\n      </Row>\r\n      {cards.length === 0 ?\r\n        <Row>\r\n          <Col> <p> You don't have any bingo cards. Click the + button to add some. 🎅🎄 </p> </Col>\r\n        </Row>\r\n        :\r\n        <Row>\r\n          {cards.map((card) => {\r\n            return (\r\n              <Col md = {6}>\r\n                <Row>\r\n                  <Col>\r\n                    <BingoCard\r\n                      card = {card}\r\n                      selected = {metaData[card.id]}\r\n                      selectBox = {selectBox}\r\n                      setDeleteShow = {setDeleteShow}\r\n                      setDeleteId = {setDeleteId}\r\n                      setResetShow = {setResetShow}\r\n                      setResetId = {setResetId}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            );\r\n          })}\r\n          </Row>\r\n        }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default BingoContainer;\r\n","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\localStorageHelper.js",[],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\models\\bingoModel.js",[],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\components\\BingoCard.js",["52","53","54","55"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst BingoModel = require('../models/bingoModel.js');\r\nconst BingoController = require('../controllers/bingoController.js');\r\n\r\nfunction BingoCard(props) {\r\n\r\n  const[card, setCard] = useState();\r\n  const[selected, setSelected] = useState();\r\n\r\n  useEffect(() => {\r\n    setCard(props.card);\r\n    setSelected(props.selected);\r\n  }, [props.card, props.selected])\r\n\r\n  const gridStyle = {textAlign: \"center\", padding: \"1%\", border: \"1px solid gray\"};\r\n  const gridHeaderStyle = {backgroundColor: \"#D4E6F1\", textAlign: \"center\", padding: \"1%\", border: \"1px solid gray\"};\r\n  const cardStyle = {margin: \"2%\"};\r\n\r\n  if(card === undefined || selected === undefined) {\r\n    return <div></div>\r\n  }\r\n  return (\r\n    <Row style = {cardStyle}>\r\n      <Col>\r\n        <Row>\r\n          {BingoModel.headers.map((header) => {\r\n            return (\r\n              <Col style = {gridHeaderStyle} >\r\n                <b style = {{color: header.color}}> {header.value} </b>\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n        {Object.keys(card.grid).map((row) => {\r\n          return (\r\n            <Row>\r\n              {card.grid[row].map((col) => {\r\n                if(col == 0) {\r\n                  return (\r\n                    <Col as = {ListGroup.Item} style = {gridStyle}>\r\n                      FREE\r\n                    </Col>\r\n                  );\r\n                }\r\n                return (\r\n                  <Col action as = {ListGroup.Item} style = {gridStyle} variant = {selected[row][col] === 1 ? \"warning\" : \"\"}\r\n                    onClick = {() => {props.selectBox(props.card.id, row, col)}}\r\n                  >\r\n                    <b> {col} </b>\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          );\r\n        })}\r\n        <Row style = {{marginTop: \"2%\", float: \"right\"}}>\r\n          <Col>\r\n            <Button variant = \"outline-dark\" size = \"sm\"\r\n              onClick = {() => {\r\n                props.setResetShow(true);\r\n                props.setResetId(card.id);\r\n              }}\r\n            >\r\n              🧽\r\n            </Button>\r\n            <Button variant = \"outline-dark\" size = \"sm\"\r\n              onClick = {() => {\r\n                props.setDeleteShow(true);\r\n                props.setDeleteId(card.id);\r\n              }}\r\n            >\r\n              🗑️\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default BingoCard;\r\n","C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\bingoController.js",[],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\db.js",[],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\models\\Bingo.js",[],"C:\\Users\\domin\\ferns-bingo\\ferns-bingo\\src\\controllers\\firebaseApp.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"67","line":24,"column":9,"nodeType":"64","messageId":"65","endLine":24,"endColumn":18},{"ruleId":"62","severity":1,"message":"68","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":12},{"ruleId":"62","severity":1,"message":"69","line":8,"column":8,"nodeType":"64","messageId":"65","endLine":8,"endColumn":13},{"ruleId":"62","severity":1,"message":"70","line":11,"column":7,"nodeType":"64","messageId":"65","endLine":11,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":46,"column":24,"nodeType":"73","messageId":"74","endLine":46,"endColumn":26},{"ruleId":"58","replacedBy":"75"},{"ruleId":"60","replacedBy":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'isLoading' is assigned a value but never used.","'Card' is defined but never used.","'Modal' is defined but never used.","'BingoController' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["77"],["78"],"no-global-assign","no-unsafe-negation"]